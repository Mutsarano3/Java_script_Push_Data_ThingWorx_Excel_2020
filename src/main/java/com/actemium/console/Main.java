/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.actemium.console;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Scanner;

import com.actemium.console.Object.SimpleThing;
import com.google.gson.Gson;

import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import java.util.Iterator;

import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.FormulaEvaluator;
import org.apache.poi.ss.usermodel.Row;
import java.util.ArrayList;

public class Main {

    //C:/Users/thomas.chiarelli/Desktop/Java/Outils Excel/ExcelTest/test.xlsx
    //192.168.56.83:9080
    //095323fa-72b0-40dd-bb1d-a623576ea771
    //pp-2003061027pr.devportal.ptc.io

    //BY STAGIAIRE
    public static void main(String[] args) throws IOException, InterruptedException {
        
        Scanner sc = new Scanner(System.in);
        System.out.println("Rentrer votre chemin absolu du fichier xlsx : ");
        String path = sc.nextLine();
        System.out.println("Rentrer votre ip ou nom de domaine de server ThingWorx: ");
        String ip = sc.nextLine();
        System.out.println("Rentrer votre cl√©  du server ThingWorx: ");
        String key = sc.nextLine();
        sc.close();
        System.out.println("le chemin est : "+ path);
        System.out.println("Votre ip est : "+ ip);
        FileInputStream inputStream = new FileInputStream(new File(path));
        XSSFWorkbook workbook = new XSSFWorkbook(inputStream);
        XSSFSheet sheet = workbook.getSheetAt(0);
        workbook.close();
        Iterator<Row> rIterator = sheet.iterator();
        int i = 0;
        ArrayList<String> arrayList = new ArrayList<>();
        ArrayList<String> generic = new ArrayList<>();
        ArrayList<String> jsons = new ArrayList<>();
        ArrayList<SimpleThing> simpleThings = new ArrayList<>();
        CloseableHttpClient client;
        CloseableHttpResponse response = null;
        client = HttpClientBuilder.create().build();
        HttpPost post  = new HttpPost("http://"+ip+"/Thingworx/Resources/EntityServices/Services/CreateThing");
        Gson gson = new Gson();
        
        while(rIterator.hasNext())
        {
            
            Row row = rIterator.next();
            Iterator<Cell> cIterator = row.cellIterator();
            while(cIterator.hasNext())
            {

                Cell cell = cIterator.next();
                CellType cellType = cell.getCellTypeEnum();
                switch (cellType) {
                    case _NONE:
                        System.out.print("");
                        System.out.print("\t");
                        break;
                    case BOOLEAN:
                        System.out.print(cell.getBooleanCellValue());
                        System.out.print("\t");
                        break;
                    case BLANK:
                        System.out.print("");
                        System.out.print("\t");
                        break;
                    case FORMULA:
                        // Formula
                        System.out.print(cell.getCellFormula());
                        System.out.print("\t");
                         
                        FormulaEvaluator evaluator = workbook.getCreationHelper().createFormulaEvaluator();
                        // Print out value evaluated by formula
                        System.out.print(evaluator.evaluate(cell).getNumberValue());
                        break;
                    case NUMERIC:
                        System.out.print(cell.getNumericCellValue());
                        System.out.print("\t");
                        break;
                    case STRING:
                        i++;
                        System.out.print(cell.getStringCellValue());
                        System.out.print("\t");
                        if(i % 2 != 0)
                        {
                            arrayList.add(cell.getStringCellValue());
                            
                        }
                        if(i % 2 == 0)
                        {
                            generic.add(cell.getStringCellValue());
                        }
                       
                        break;
                    case ERROR:
                        System.out.print("!");
                        System.out.print("\t");
                        break;
                    }
            }
            System.out.println("");
           
        }
        for(int y = 0; y<arrayList.size();y++)
        {
            simpleThings.add(new SimpleThing(arrayList.get(y),generic.get(y)));
            
        }

        for(SimpleThing v : simpleThings)
        {
            String json = gson.toJson(v);
            jsons.add(json);
        }
        
        post.setHeader("Accept", "application/json");
        post.setHeader("appKey", key);
        int x = 0;
        for(String js: jsons)
        {
            x++;
            post.setEntity(new StringEntity(js,ContentType.APPLICATION_JSON));
            try {
                response=client.execute(post);
            } catch (Exception e) {
                //TODO: handle exception
            }
            finally{
                //client.close();
                response.close();
            }
            
             System.out.println(response.getStatusLine().getStatusCode());
        }
       

       
       
        
        
       
        

        
    }

    
}
